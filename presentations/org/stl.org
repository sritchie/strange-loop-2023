#+Startup: indent

#+OPTIONS: num:nil reveal_global_footer:t toc:nil reveal_history:t
#+PROPERTY: header-args :eval no-export

#+include: reveal_header.org :minlevel 1

#+Title: Emmy
#+Subtitle: Moldable Physics, Lispy Microworlds

* New Outline

Sketch from notes:

Previous talk was kind of weird, honestly, it was about these notes I wanted to
take, not talking about the Why.

** Vision

My work on the executable textbook project started from a place of deep
frustration with the symbol-heavy feeling of modern STEM education. Unlike music
or artistic education, the pencil-and-paper symbolic manipulations I spent years
learning are disconnected from the tools and mental models used by working
engineers.


- thinking of what I want to teach my kids
- aesthetic awakening?
- to do this and flex the world you need this kind of vision
- computers are the way, and there are beautiful examples
- typically very private, you build things in your head

Imagine a world instead where, starting in elementary school, kids encounter
geometry, math and physics through interactive "microworlds", or playful
simulations designed to explore ideas like motion, balance and gravity. As
students matured they'd discover that these microworlds formed the spine of a
series of executable textbooks, with the mathematics of ideas like
electromagnetism augmented by powerful circuit simulations. Usually-dry
mathematics would gain the ability to perform itself for a student, and the
student, by taking their notes in this computational environment, would build up
a portfolio of tangible, executable code and models over the course of their
education.

- if we want to open it up we need communities.

** Steps

I've attempted to clear a path toward this vision by:

 - Building Emmy, a state-of-the-art computer algebra system, like Mathematica
   capable of running in a browser or on a modern workstation

 - Creating a library of modern 2D and 3D visualization plugins capable of
   exploring ideas in mathematics and physics from elementary school up through
   MIT-graduate-level of sophistication

 - Building out a notebook interface capable of allowing students to work with
   powerful mathematical tools in a collaborative way, almost like Google Docs
   for a computing environment, with instant feedback and access to computing
   resources

Alternatively:

Yes this stuff is available, but there's no shared runtime and easy community.
To get there we need

- some shared canvas, shared forum with a runtime
- full of tools
- has to be extensible

** News

Former update, this needs to change:

The first two items are substantially complete, and I'm working on the
collaborative piece of the third now. Just last week Gerald Sussman at MIT
committed to teaching his graduate-level fall physics course with these tools,
and the MIT Probabilistic Computing Project reached out about teaching 3 courses
in probabilistic programming this fall, and extending Emmy to be able to train
machine learning models and deploy them inside the executable textbook
environment.

I've recently broken into the communal project and I want to share updates.
Shared runtime; let me tell you what we have and how you can help me.

** Contributions

- Emmy of course, what's emmy

Reuse previous stuff from the last talk, Sussman history

Design choices are aiming at environments OUT of the machine. Combo of community
play, then sensors, new wave.

Coming next is the ability to collaborate in real-time in a shared runtime.
social models etc.

YOU CAN HELP ME by writing, playing, using this code, teaching people you know
something and handing it off and then sharing it with me so I can be a hub for a
while as this thing lifts off.

** What demos to use?

- phase portrait demo for sure
- Maria demos of 2D plotting



* Emmy
#+begin_notes
- Hi!
- Clojure since 2010
- worked for big tech companies...
- talk about what I've been doing since 2.5 years ago...
#+end_notes

** Moldable Physics, Lispy Microworlds
:PROPERTIES:
:UNNUMBERED: notoc
:NOSLIDE:  t
:END:

[[https://samritchie.io/][Sam Ritchie]], Mentat Collective

#+REVEAL_HTML: <img width="30%" src="../images/emmy.png">

Clojure/Conj 2023

* SICM & FDG
#+begin_notes
- what are the books?
- message of impressionistic notation
- stick it to the physicists
- CLARITY THROUGH LISP!
#+end_notes

#+REVEAL_HTML: <img height="500" src="../images/sicm.jpeg">
#+REVEAL_HTML: <img height="500" src="../images/fdg.jpeg">

#+REVEAL: split
#+begin_notes
- Saw this as a commandment.
- I will take notes as code!
- talk about the fear of rewriting another book
#+end_notes
"*programs must be written for people to read*, and only incidentally for
machines to execute."

#+REVEAL_HTML: <small>~ Hal Abelson, Structure and Interpretation of Computer Programs</small>
#+REVEAL_HTML: <br><img height="300px" src="../images/sicp.jpeg">

* MathBox
#+begin_notes
- Earlier I had seen MathBox...
- Steven Wittens
#+end_notes

#+REVEAL: split data-background-iframe="https://mathbox.org/math/fieldlines.html"
#+begin_notes
- magnetic field lines??
- code performing itself
- PROBLEM: incompatible with abstraction
#+end_notes

** Typical "Fast" Code
#+begin_notes
- Code == medium to communicate
- also a medium we use to /build/ systems
- there is a tension.
#+end_notes

#+begin_export html
<p class="codepen" data-height="500" data-default-tab="html,result" data-slug-hash="ExpVaw" data-user="zadvorsky" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;">
  <span>See the Pen <a href="https://codepen.io/zadvorsky/pen/ExpVaw">
  Double Double Pendulum</a> by Szenia Zadvornykh (<a href="https://codepen.io/zadvorsky">@zadvorsky</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script>
#+end_export

* !!
#+begin_notes
- So I did what any of us would do!
- spent years...
- connect them, run in browser.
- I even started a substack!
- what a project...
#+end_notes

#+REVEAL_HTML: <img width="40%" src="../images/bulb.png">

* Emmy
#+begin_notes
- that led me to Emmy, Colin
- computer algebra system in Clojure.
- other mentat projects: Leva, MathBox etc
#+end_notes

https://github.com/mentat-collective
#+REVEAL_HTML: <img width="60%" src="../images/emmy.png">

* Agenda
#+begin_notes
how Emmy bridges this performance gap
#+end_notes

- Generics, Generics, Generics!
- Calculus with Generics
- Demos with Clerk and Physics
- What's next?

* scmutils by GJS
#+begin_notes
- Based on scmutils by GJS, co-creator of Scheme...
- sitting on his academic web page
- 65kloc
- RUNS on my machine, I can interrogate it at the REPL!
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/gjs.jpg">

** Einstein's Field Equations
  #+begin_notes
  This is IN THE TESTS
  #+end_notes

  #+begin_src clojure
(deftest einstein-field-equations-test
  (with-literal-functions [R rho p]
    (let [basis       (e/coordinate-system->basis spacetime-sphere)
          g           (FLRW-metric 'c 'k R)
          T_ij        ((e/drop2 g basis) (Tperfect-fluid rho p 'c g))
          [d:dt d:dr] (e/coordinate-system->vector-basis spacetime-sphere)
          K           (/ (* 8 'pi 'G) (expt 'c 4))]
      (testing "first challenge (89s)"
        (is (= '(/ (+ (* -8 G pi (expt (R t) 2) (rho t))
                      (* -1 Lambda (expt c 2) (expt (R t) 2))
                      (* 3 (expt c 2) k)
                      (* 3 (expt ((D R) t) 2)))
                   (expt (R t) 2))
               (simplify
                ((((Einstein-field-equation spacetime-sphere K)
                   g 'Lambda T_ij)
                  d:dt d:dt)
                 ((point spacetime-sphere)
                  (up 't 'r 'theta 'phi))))))))))
  #+end_src

* Core Idea: Generics
#+begin_notes
Let's talk about the code idea:

- generics + mathematical objects
- multimethods and protocols
- STAY GENERIC AS LONG AS POSSIBLE and then specialize
- then happily build little compilers inside your code
#+end_notes


"If a system is built as a ball of mud, it is easy to add more mud.

One organization for a ball of mud is a system erected on a substrate of
generically extensible procedures."

#+REVEAL_HTML: <small>~ Hanson and Sussman, Software Design for Flexibility</small>

#+REVEAL: split
#+begin_notes
As Kir said, impl is so easy...
- plus is already overloaded, so this opens it up
#+end_notes

#+begin_src clojure :results value pp :exports both
(+ 1 2)
#+end_src

#+RESULTS:
: 3
:

#+begin_src clojure :results value pp :exports both
(+ 1/2 1/3)
#+end_src

#+RESULTS:
: 5/6
:

#+begin_src clojure :results value pp :exports both
(+ 1 'x)
#+end_src

#+RESULTS:
: (+ 1 x)
:

#+begin_src clojure :results value pp :exports both
(transduce (map square) + ['x 'y 'z])
#+end_src
#+RESULTS:
: (+ (expt x 2) (expt y 2) (expt z 2))
:

#+REVEAL: split
#+begin_notes
- Works on weirder objects
- ball of mud
- puzzler at the end
#+end_notes
#+begin_src clojure :results value pp :exports both
(+ sin cos)
#+end_src

#+RESULTS:
: #function[clojure.lang.AFunction/1]
:

#+begin_src clojure :results value pp :exports both
((+ sin cos) 'x)
#+end_src

#+RESULTS:
: (+ (sin x) (cos x))
:

#+begin_src clojure :results value pp :exports both
((square [+ *]) 'x 'y)
#+end_src

#+RESULTS:
: (+ (* (+ x y) (+ x y)) (* x y x y))
:

#+REVEAL: split
#+begin_notes
- also comes with a powerful simplifier
- performance shimmers...
#+end_notes

#+begin_src clojure :results value pp :exports both
(defn unit-circle [angle]
  [(cos angle)
   (sin angle)])

(defn mag [thing]
  (sqrt (square thing)))
#+end_src

#+RESULTS:
: #'prez/mag
:

#+begin_src clojure :results value pp :exports both
((mag unit-circle) 'theta)
#+end_src

#+RESULTS:
: (sqrt (+ (* (cos theta) (cos theta)) (* (sin theta) (sin theta))))
:

#+begin_src clojure :results value pp :exports both
(simplify
 ((mag unit-circle) 'theta))
#+end_src

#+RESULTS:
: 1
:

#+REVEAL: split
#+begin_notes
- Hints of speed
- little compiler
#+end_notes

#+begin_src clojure :results value pp :exports both
(defn fast! [f]
  (let [sym  (gensym)
        body (f sym)]
    `(fn [~sym]
       ~(simplify body))))
#+end_src

#+RESULTS:
: #'prez/fast!
:

#+begin_src clojure :results value pp :exports both
(fast! (mag unit-circle))
#+end_src

#+RESULTS:
: (clojure.core/fn [G__79973] 1)
:

* Calculus!
#+begin_notes
- next let's make a new datatype.
#+end_notes

** Core Idea of Physics Simulation:

- states depend on positions and velocities
- physics updates velocities


** Taylor Series Expansion
#+begin_notes
- strange way of developing...
- Math vs programming
- make up a new epsilon idea
#+end_notes

$$f(x) = f(a)+\frac{Df(a)}{1!}(x-a)+\frac{D^2f(a)}{2!}(x-a)^{2}+\cdots$$

#+ATTR_REVEAL: :frag t :frag_idx 1
$$f(a+\varepsilon) =
f(a)+\frac{Df(a)}{1!}(\varepsilon)+\frac{D^2f(a)}{2!}(\varepsilon)^2+\cdots$$

#+REVEAL: split
#+begin_notes
kill all the terms to the right
#+end_notes

$$\varepsilon^2 = 0$$

that would give us...

$$f(a+\varepsilon) = f(a) + Df(a)\varepsilon$$


#+ATTR_REVEAL: :frag t :frag_idx 1
Apply it twice, get the chain rule!

#+ATTR_REVEAL: :frag t :frag_idx 1
$$\begin{aligned}
g(f(a+\varepsilon)) &= g\left(f(a) + Df(a)\varepsilon\right) \\
&= g\left(f(a)\right) + \left(Dg(f(a)))(Df(a)\right)\varepsilon
\end{aligned}$$

* => Emacs
#+begin_notes
-
#+end_notes

* ❤️ Libre Software ❤️
#+begin_notes
- Clojure library vs exact port
- immutable data structures, streams etc
- Not just performance!
- There is more to discover!
#+end_notes

https://github.com/mentat-collective
#+REVEAL_HTML: <img width="60%" src="../images/emmy.png">

** CAS as a Library?
#+begin_notes
- Lots of diff environments
- really unusual
- piggyback on performance!
#+end_notes

- Clojure/Script
- JavaScript, NPM
- SCI
- Clerk
- JSXGraph, Mafs, MathBox
- Leva, MathLive

#+REVEAL: split data-background-iframe="https://kloimhardt.github.io/cljtiles.html?page=freeparticle"
#+begin_notes
Slide
#+end_notes

#+REVEAL: split data-background-iframe="https://kloimhardt.github.io/blog/hamiltonmechanics/2023/03/21/units-harmonic.html"
#+begin_notes
scheme interpreter in JS
#+end_notes

* What's next?
#+begin_notes
solves the bootstrapping problem...
HUGE amount of material
#+end_notes

- More targets: dtype-next, JAX, etc
- SICM and FDG: Executable Textbooks
- Collaborative editing, simulation
- Break free from tiny glass!

** LOGO's Microworlds
#+begin_notes
- microworlds put you in the system!
- but it needs more batteries
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/papert.jpeg">

#+REVEAL: split data-background-iframe="https://paperprograms.org"

* Thanks!
#+begin_notes
- questions?
- If this is interesting, let's talk!
#+end_notes

Sam Ritchie, Mentat Collective

https://github.com/mentat-collective
https://roadtoreality.substack.com
