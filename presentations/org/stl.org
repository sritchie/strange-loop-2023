#+Startup: indent

#+OPTIONS: num:nil reveal_global_footer:t toc:nil reveal_history:t
#+PROPERTY: header-args :eval no-export

#+include: reveal_header.org :minlevel 1

#+Title: Emmy
#+Subtitle: Computational Physics, Beyond the Glass

* Emmy
#+begin_notes
- Hi!
- BE GLAD, so excited,
- spoke in 2017
- Who am I? Clojure, Scala since 2010
- worked for big tech companies... then off into the wilds
#+end_notes

** Computational Physics, Beyond the Glass
:PROPERTIES:
:UNNUMBERED: notoc
:NOSLIDE:  t
:END:

[[https://samritchie.io/][Sam Ritchie]], MIT Probabilistic Computing Project

#+REVEAL_HTML: <img width="30%" src="../images/emmy.png">

Strange Loop 2023

** ...
#+begin_notes
- What's changed since stl?
#+end_notes

#+REVEAL: split data-background="../images/kids.JPG"
#+begin_notes
- I'm a dad now, 3 kids
- faced with sharing with them what I love.
- thinking about the culture of what we love here.
#+end_notes

** Transmitting Culture
#+begin_notes
- Music, literature, easy...
- code better...
- you can perform these things!
#+end_notes

** Culture of Math & Physics
#+begin_notes
- What is the culture?
- you can model the world! We are seekers!
- abstraction, math, physics, hard!
- symbol filter

TODO simplify:

My work on the executable textbook project started from a place of deep
frustration with the symbol-heavy feeling of modern STEM education. Unlike music
or artistic education, the pencil-and-paper symbolic manipulations I spent years
learning are disconnected from the tools and mental models used by working
engineers.
#+end_notes

#+REVEAL_HTML: <img width="100%" src="../images/geodesics.png">

* Vision!
#+begin_notes
- beyond the glass
- wanted to contribute something, build tools
- I went looking for inspiration, AnnMarie etc
- so much out there
#+end_notes

** LOGO's Microworlds
#+begin_notes
- There is prior art for this! lots of it of course...
- microworlds put you in the system!
- but it needs more batteries

Imagine a world instead where, starting in elementary school, kids encounter
geometry, math and physics through interactive "microworlds", or playful
simulations designed to explore ideas like motion, balance and gravity. As
students matured they'd discover that these microworlds formed the spine of a
series of executable textbooks, with the mathematics of ideas like
electromagnetism augmented by powerful circuit simulations. Usually-dry
mathematics would gain the ability to perform itself for a student, and the
student, by taking their notes in this computational environment, would build up
a portfolio of tangible, executable code and models over the course of their
education.
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/papert.jpeg">

#+REVEAL: split data-background-size=contain data-background-image="../images/logolang.png"
#+begin_notes
- immediately getting beautiful stuff
- stuck, rule of 360
#+end_notes

#+REVEAL: split data-background-iframe="https://dynamicland.org"
#+begin_notes
- dynamicland, nothing's precious
- the environment is alive
#+end_notes

#+REVEAL: split data-background-size=contain data-background-image="../images/3b1b.png"
#+begin_notes
National treasure!! But not really interactive.
#+end_notes

#+REVEAL: split data-background-size=contain data-background-image="../images/diamondage.jpeg"
#+begin_notes
AYLIP, community baked in
- TODO check exact details
#+end_notes

** SICM & FDG
#+begin_notes
- what are the books?
- message of impressionistic notation
- stick it to the physicists
- CLARITY THROUGH LISP!
- ... no good for kids
#+end_notes

#+REVEAL_HTML: <img height="500" src="../images/sicm.jpeg">
#+REVEAL_HTML: <img height="500" src="../images/fdg.jpeg">

** Euler-Lagrange Equations

#+begin_notes
Sussman hooked me with the culture question!!
#+end_notes

#+ATTR_REVEAL: :frag t :frag_idx 2
"What could this expression possibly mean?"

$${\frac{d}{d t} \frac{\partial L}{\partial \dot{q}}}-\frac{\partial L}{\partial q}=0$$

#+ATTR_REVEAL: :frag t :frag_idx 3
#+begin_src clojure :eval none
(defn Lagrange-equations [L]
  (fn [w]
    (- (D (comp ((partial 2) L) (Gamma w)))
       (comp ((partial 1) L) (Gamma w)))))
#+end_src

#+ATTR_REVEAL: :frag t :frag_idx 3
$$D\left(\left(\partial_{2} L\right) \circ \left(\Gamma[w]\right)\right)
   \\ -\left(\partial_{1} L\right) \circ \left(\Gamma[w]\right)=0$$

* Steps

#+begin_notes
The CHALLENGE is to build something that feels like it has come from a
community.

Not your typical codebase.

I've attempted to clear a path toward this vision by:

 - Building Emmy, a state-of-the-art computer algebra system, like Mathematica
   capable of running in a browser or on a modern workstation

 - Creating a library of modern 2D and 3D visualization plugins capable of
   exploring ideas in mathematics and physics from elementary school up through
   MIT-graduate-level of sophistication

 - Building out a notebook interface capable of allowing students to work with
   powerful mathematical tools in a collaborative way, almost like Google Docs
   for a computing environment, with instant feedback and access to computing
   resources
#+end_notes

#+ATTR_REVEAL: :frag (grow)
1. Build a CAS that can bring physics to life
2. Do it in a way that seeds the culture
3. Hoist it into the browser
4. Make it collaborative
5. Build a community, beyond the glass

** Current State
#+begin_notes
- Just this August I've got everything running in editable, you-can-play-with-this form

- I've also joined the MIT Probabilistic Computing Project where we'll be
  building out these ideas.

Former update, this needs to change:

The first two items are substantially complete, and I'm working on the
collaborative piece of the third now. Just last week Gerald Sussman at MIT
committed to teaching his graduate-level fall physics course with these tools,
and the MIT Probabilistic Computing Project reached out about teaching 3 courses
in probabilistic programming this fall, and extending Emmy to be able to train
machine learning models and deploy them inside the executable textbook
environment.

I've recently broken into the communal project and I want to share updates.
Shared runtime; let me tell you what we have and how you can help me.

- lots of work here by Martin, Jack, Matt,
#+end_notes

#+REVEAL: split data-background-iframe="http://localhost:7777/notebooks/stl/pq_knot/edit.clj"
#+begin_notes
Emmy!

- I went to find something I could steal
- first part of creating culture is stealing lots of ideas.
- I stole a lot and this project brings together many communities
- mention Colin
#+end_notes

* scmutils by GJS
#+begin_notes
- Based on scmutils by GJS, co-creator of Scheme...
- sitting on his academic web page
- 65kloc
- RUNS on my machine, I can interrogate it at the REPL!
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/gjs.jpg">

** Einstein's Field Equations
  #+begin_notes
  This is IN THE TESTS
  #+end_notes

  #+begin_src clojure
(deftest einstein-field-equations-test
  (with-literal-functions [R rho p]
    (let [basis       (e/coordinate-system->basis spacetime-sphere)
          g           (FLRW-metric 'c 'k R)
          T_ij        ((e/drop2 g basis) (Tperfect-fluid rho p 'c g))
          [d:dt d:dr] (e/coordinate-system->vector-basis spacetime-sphere)
          K           (/ (* 8 'pi 'G) (expt 'c 4))]
      (testing "first challenge (89s)"
        (is (= '(/ (+ (* -8 G pi (expt (R t) 2) (rho t))
                      (* -1 Lambda (expt c 2) (expt (R t) 2))
                      (* 3 (expt c 2) k)
                      (* 3 (expt ((D R) t) 2)))
                   (expt (R t) 2))
               (simplify
                ((((Einstein-field-equation spacetime-sphere K)
                   g 'Lambda T_ij)
                  d:dt d:dt)
                 ((point spacetime-sphere)
                  (up 't 'r 'theta 'phi))))))))))
  #+end_src

#+REVEAL: split
#+begin_notes
talk about how this is built
#+end_notes

"If a system is built as a ball of mud, it is easy to add more mud.

One organization for a ball of mud is a system erected on a substrate of
generically extensible procedures."

#+REVEAL_HTML: <small>~ Hanson and Sussman, Software Design for Flexibility</small>

#+REVEAL: split
#+begin_notes
- plus is already overloaded, so this opens it up
#+end_notes

#+begin_src clojure :results value pp :exports both
(+ 1 2)
#+end_src

#+RESULTS:
: 3
:

#+begin_src clojure :results value pp :exports both
(+ 1/2 1/3)
#+end_src

#+RESULTS:
: 5/6
:

#+begin_src clojure :results value pp :exports both
(+ 1 'x)
#+end_src

#+RESULTS:
: (+ 1 x)
:

#+begin_src clojure :results value pp :exports both
(reduce + (map square ['x 'y 'z]))
#+end_src
#+RESULTS:
: (+ (expt x 2) (expt y 2) (expt z 2))
:

#+REVEAL: split
#+begin_notes
- Works on weirder objects
- ball of mud
- puzzler at the end
#+end_notes
#+begin_src clojure :results value pp :exports both
(D (+ sin cos))
#+end_src

#+RESULTS:
: #function[clojure.lang.AFunction/1]
:

#+begin_src clojure :results value pp :exports both
((D (+ sin cos)) 'x)
#+end_src

#+RESULTS:
: (+ (cos x) (- (sin x)))
:

#+begin_src clojure :results value pp :exports both
(->infix
 (simplify
  ((D (square [+ *])) 'x 'y)))
#+end_src

#+RESULTS:
: "down(2 x y² + 2 x + 2 y, 2 x² y + 2 x + 2 y)"
:

#+REVEAL: split
#+begin_notes
- also comes with a powerful simplifier
- performance shimmers...
- TODO show off some calculus instead of the simplifier here?
#+end_notes

#+begin_src clojure :results value pp :exports both
(defn unit-circle [angle]
  [(cos angle)
   (sin angle)])

(defn mag [thing]
  (sqrt (square thing)))
#+end_src

#+RESULTS:
: #'user/mag
:

#+begin_src clojure :results value pp :exports both
((D (mag unit-circle)) 'theta)
#+end_src

#+RESULTS:
: (* (/ 1 (* (sqrt (+ (* (cos theta) (cos theta))
:                     (* (sin theta) (sin theta)))) 2))
:    (+ (* (cos theta) (- (sin theta)))
:    (* (cos theta) (- (sin theta)))
:    (* (sin theta) (cos theta))
:    (* (sin theta) (cos theta))))
:

#+begin_src clojure :results value pp :exports both
(simplify
 ((D (mag unit-circle)) 'theta))
#+end_src

#+RESULTS:
: 0
:

* Code as Literature

#+REVEAL: split
#+begin_notes
- Saw this as a commandment.
#+end_notes
"*programs must be written for people to read*, and only incidentally for
machines to execute."

#+REVEAL_HTML: <small>~ Hal Abelson, Structure and Interpretation of Computer Programs</small>
#+REVEAL_HTML: <br><img height="300px" src="../images/sicp.jpeg">

#+REVEAL: split data-background-iframe="https://sritchie.github.io/emmy/src/emmy/differential.html"

* MathBox
#+begin_notes
- Earlier I had seen MathBox...
- Main contribution is plugging these together
#+end_notes

#+REVEAL: split data-background-iframe="https://mathbox.org/math/fieldlines.html"
#+begin_notes
- magnetic field lines??
- code performing itself
- PROBLEM: incompatible with abstraction
#+end_notes

#+REVEAL: split data-background-iframe="https://2.maria.cloud/gist/b94f923167a574acce2b534aa9f38bc9"
#+begin_notes
- So I was actually able to build a system where these two interact...
- mathbox as first class objects
- TODO demos?
- taylor series
#+end_notes

#+REVEAL: split data-background-iframe="https://emmy-viewers.mentat.org/dev/examples/simulation/toroid"
#+begin_notes
TODO what is my goal here??
#+end_notes

#+REVEAL: split data-background-iframe="http://localhost:7777/notebooks/stl/toroid/edit.clj"
#+begin_notes
editable torus, in the slides!!
#+end_notes

#+REVEAL: split data-background-iframe="https://emmy-viewers.mentat.org/dev/examples/simulation/ellipsoid/edit"
#+begin_notes
animating ellipsoid
#+end_notes

* What's next?
#+begin_notes
Get out of the machine
#+end_notes

#+REVEAL: split data-background="../images/nurse_log.jpeg"
#+begin_notes
- Nurse log
- lots of material but we want to get out!
#+end_notes

#+REVEAL: split data-background-iframe="https://reality.mentat.org/essays/reality/introduction"
#+begin_notes
road to reality
#+end_notes

#+REVEAL: split
#+begin_notes
Design choices are aiming at environments OUT of the machine. Combo of community
play, then sensors, new wave.

Coming next is the ability to collaborate in real-time in a shared runtime.
social models etc.
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/papert.jpeg">

#+REVEAL: split
#+begin_notes
- Built Emmy
- Runs in the browser, full computer algebra system you can use
- Emmy of course, what's emmy

YOU CAN HELP ME by writing, playing, using this code, teaching people you know
something and handing it off and then sharing it with me so I can be a hub for a
while as this thing lifts off.
#+end_notes

#+REVEAL_HTML: <img width="30%" src="../images/emmy.png">

https://reality.mentat.org
