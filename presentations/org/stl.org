#+Startup: indent

#+OPTIONS: num:nil reveal_global_footer:t toc:nil reveal_history:t
#+PROPERTY: header-args :eval no-export

#+include: reveal_header.org :minlevel 1

#+Title: Emmy
#+Subtitle: Computational Physics, Beyond the Glass

* Emmy
#+begin_notes
- Hi!
- BE GLAD, so excited,
- spoke in 2017
- Who am I? Clojure, Scala since 2010
- worked for big tech companies... then off into the wilds
#+end_notes

** Computational Physics, Beyond the Glass
:PROPERTIES:
:UNNUMBERED: notoc
:NOSLIDE:  t
:END:

[[https://samritchie.io/][Sam Ritchie]], MIT Probabilistic Computing Project

#+REVEAL_HTML: <img width="30%" src="../images/emmy.png">

Strange Loop 2023

** ...
#+begin_notes
- What's changed since stl2017?
#+end_notes

#+REVEAL: split data-background="../images/kids.JPG"
#+begin_notes
- I'm a dad now, 3 kids
- faced with sharing with them what I love.
- what is the strange loop culture? how to comm?
-
#+end_notes

** Transmitting Culture
#+begin_notes
- Music, literature, easy...
- code better...
- story, community, perform
#+end_notes

** Culture of Math & Physics
#+begin_notes
- math, physics bound up behind abstraction!
- symbol filter
- What is the culture?
- == you can model the world! We are seekers!
#+end_notes

#+REVEAL_HTML: <img width="60%" src="../images/geodesics.png">

* Vision!
#+begin_notes
- wanted to contribute something, build tools
- I went looking for inspiration, AnnMarie etc
- so much out there
- not hopeless, not nice defaults.
#+end_notes

** LOGO's Microworlds
#+begin_notes
- prior art! lots of course...
- microworlds put you in the system!
- needs more batteries
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/papert.jpeg">

#+REVEAL: split data-background-size=contain data-background-image="../images/logolang.png"
#+begin_notes
- immediately getting beautiful stuff
- stuck? rule of 360
- teachers drawn in, playful
#+end_notes

#+REVEAL: split data-background-iframe="https://dynamicland.org"
#+begin_notes
- dynamicland, nothing's precious
- the environment is alive
#+end_notes

#+REVEAL: split data-background-size=contain data-background-image="../images/3b1b.png"
#+begin_notes
National treasure!! But not really interactive.
#+end_notes

#+REVEAL: split data-background-size=contain data-background-image="../images/diamondage.jpeg"
#+begin_notes
AYLIP, community baked in
#+end_notes

** SICM & FDG
#+begin_notes
- what are the books?
- message of impressionistic notation
- stick it to the physicists
- CLARITY THROUGH LISP!
- ... no good for kids
#+end_notes

#+REVEAL_HTML: <img height="500" src="../images/sicm.jpeg">
#+REVEAL_HTML: <img height="500" src="../images/fdg.jpeg">

** Euler-Lagrange Equations

#+begin_notes
- BUT he went really, really far...
- no topping out!
- also Sussman hooked me with the culture note.
- no visuals
#+end_notes

#+ATTR_REVEAL: :frag t :frag_idx 2
"What could this expression possibly mean?"

$${\frac{d}{d t} \frac{\partial L}{\partial \dot{q}}}-\frac{\partial L}{\partial q}=0$$

#+ATTR_REVEAL: :frag t :frag_idx 3
#+begin_src clojure :eval none
(defn Lagrange-equations [L]
  (fn [w]
    (- (D (comp ((partial 2) L) (Gamma w)))
       (comp ((partial 1) L) (Gamma w)))))
#+end_src

#+ATTR_REVEAL: :frag t :frag_idx 3
$$D\left(\left(\partial_{2} L\right) \circ \left(\Gamma[w]\right)\right)
   \\ -\left(\partial_{1} L\right) \circ \left(\Gamma[w]\right)=0$$

* Steps

#+begin_notes
- Not your typical codebase.
#+end_notes

#+ATTR_REVEAL: :frag (grow)
1. Build a visual CAS that can bring physics to life
2. Do it in a way that seeds the culture
3. and runs anywhere (browser, robots...)
4. Make it collaborative
5. Build a community, beyond the glass

** Current State
#+begin_notes
- August: everything here quite recent, plays everywhere
- lots of work here by Colin, Martin, Jack, nextjournal, Matt, Borkdude
#+end_notes

#+REVEAL: split data-background-iframe="http://localhost:7777/notebooks/stl/pq_knot/edit.clj"
#+begin_notes
Emmy!

- I went to find something I could steal
- first part of creating culture is stealing lots of ideas.
- I stole a lot and this project brings together many communities
- mention Colin
#+end_notes

* scmutils by GJS
#+begin_notes
- Based on scmutils by GJS, co-creator of Scheme...
- sitting on his academic web page
- 65kloc
- RUNS on my machine, I can interrogate it at the REPL!
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/gjs.jpg">

** Einstein's Field Equations
  #+begin_notes
  This is IN THE TESTS
  #+end_notes

  #+begin_src clojure
(deftest einstein-field-equations-test
  (with-literal-functions [R rho p]
    (let [basis       (e/coordinate-system->basis spacetime-sphere)
          g           (FLRW-metric 'c 'k R)
          T_ij        ((e/drop2 g basis) (Tperfect-fluid rho p 'c g))
          [d:dt d:dr] (e/coordinate-system->vector-basis spacetime-sphere)
          K           (/ (* 8 'pi 'G) (expt 'c 4))]
      (testing "first challenge (89s)"
        (is (= '(/ (+ (* -8 G pi (expt (R t) 2) (rho t))
                      (* -1 Lambda (expt c 2) (expt (R t) 2))
                      (* 3 (expt c 2) k)
                      (* 3 (expt ((D R) t) 2)))
                   (expt (R t) 2))
               (simplify
                ((((Einstein-field-equation spacetime-sphere K)
                   g 'Lambda T_ij)
                  d:dt d:dt)
                 ((point spacetime-sphere)
                  (up 't 'r 'theta 'phi))))))))))
  #+end_src

#+REVEAL: split
#+begin_notes
- if you want to play together, you need mud!
- rebuild in Clojure on top of Colin's work
- ClojureScript, browser
#+end_notes

"If a system is built as a ball of mud, it is easy to add more mud.

One organization for a ball of mud is a system erected on a substrate of
generically extensible procedures."

#+REVEAL_HTML: <small>~ Hanson and Sussman, Software Design for Flexibility</small>

#+REVEAL: split
#+begin_notes
- clojure does not support autodiff
- but we can add it in
- plus is already overloaded, so this opens it up
#+end_notes

#+begin_src clojure :results value pp :exports both
(+ 1 2)
#+end_src

#+RESULTS:
: 3
:

#+begin_src clojure :results value pp :exports both
(+ 1/2 1/3)
#+end_src

#+RESULTS:
: 5/6
:

#+begin_src clojure :results value pp :exports both
(+ 1 'x)
#+end_src

#+RESULTS:
: (+ 1 x)
:

#+begin_src clojure :results value pp :exports both
(reduce + (map square ['x 'y 'z]))
#+end_src
#+RESULTS:
: (+ (expt x 2) (expt y 2) (expt z 2))
:

#+REVEAL: split
#+begin_notes
- Works on weirder objects
- ball of mud
- puzzler at the end
#+end_notes
#+begin_src clojure :results value pp :exports both
(D (+ sin cos))
#+end_src

#+RESULTS:
: #function[clojure.lang.AFunction/1]
:

#+begin_src clojure :results value pp :exports both
((D (+ sin cos)) 'x)
#+end_src

#+RESULTS:
: (+ (cos x) (- (sin x)))
:

#+begin_src clojure :results value pp :exports both
(->infix
 (simplify
  ((D (square [+ *])) 'x 'y)))
#+end_src

#+RESULTS:
: "down(2 x y² + 2 x + 2 y, 2 x² y + 2 x + 2 y)"
:

#+REVEAL: split
#+begin_notes
- also comes with a powerful simplifier
- performance shimmers...
- TODO show off some calculus instead of the simplifier here?
#+end_notes

#+begin_src clojure :results value pp :exports both
(defn unit-circle [angle]
  [(cos angle)
   (sin angle)])

(defn mag [thing]
  (sqrt (square thing)))
#+end_src

#+RESULTS:
: #'user/mag
:

#+begin_src clojure :results value pp :exports both
((D (mag unit-circle)) 'theta)
#+end_src

#+RESULTS:
: (* (/ 1 (* (sqrt (+ (* (cos theta) (cos theta))
:                     (* (sin theta) (sin theta)))) 2))
:    (+ (* (cos theta) (- (sin theta)))
:    (* (cos theta) (- (sin theta)))
:    (* (sin theta) (cos theta))
:    (* (sin theta) (cos theta))))
:

#+begin_src clojure :results value pp :exports both
(simplify
 ((D (mag unit-circle)) 'theta))
#+end_src

#+RESULTS:
: 0
:

* Code as Literature
#+begin_notes
- another thing I stuck to...
- not normal
#+end_notes

#+REVEAL: split
#+begin_notes
- Saw this as a commandment.
#+end_notes
"*programs must be written for people to read*, and only incidentally for
machines to execute."

#+REVEAL_HTML: <small>~ Hal Abelson, Structure and Interpretation of Computer Programs</small>
#+REVEAL_HTML: <br><img height="300px" src="../images/sicp.jpeg">

#+REVEAL: split data-background-iframe="https://sritchie.github.io/emmy/src/emmy/differential.html"

* MathBox
#+begin_notes
- Earlier I had seen MathBox...
- viz were missing
#+end_notes

#+REVEAL: split data-background-iframe="https://mathbox.org/math/fieldlines.html"
#+begin_notes
- magnetic field lines??
- code performing itself
- PROBLEM: incompatible with abstraction
#+end_notes

#+REVEAL: split data-background-iframe="https://2.maria.cloud/gist/30dbb25a2d2eb7324e0aad1097c459ae"
#+begin_notes
- So I was actually able to build a system where these two interact...
- mention Maria
- viz as first class objects
#+end_notes

#+REVEAL: split data-background-iframe="https://2.maria.cloud/gist/0405c3427c88326a181b307371f939bc"
#+begin_notes
3D system as values
#+end_notes

#+REVEAL: split
#+REVEAL_HTML: <img width="70%" src="../images/geodesics.png">

#+REVEAL: split data-background-iframe="https://sritchie.github.io/strange-loop-2023/notebooks/stl/toroid/edit"
#+begin_notes
editable torus, in the slides!!
#+end_notes

#+REVEAL: split data-background-iframe="https://sritchie.github.io/strange-loop-2023/notebooks/stl/klein/edit"
#+begin_notes
klein
#+end_notes

#+REVEAL: split data-background-iframe="https://emmy-viewers.mentat.org/dev/examples/simulation/ellipsoid/edit"
#+begin_notes
animating ellipsoid
#+end_notes

#+REVEAL: split data-background-iframe="https://sritchie.github.io/strange-loop-2023/notebooks/stl/phase_portrait/edit"
#+begin_notes
phase portrait
#+end_notes

* What's next?
#+begin_notes
- lots of components that can run anywhere!
- add batteries to things like logo, dynamicland
- out of the machine
- build the prequel
#+end_notes

#+REVEAL: split data-background="../images/nurse_log.jpeg"
#+begin_notes
- Library as nurse log
- executable wikipedia
#+end_notes

#+REVEAL: split data-background-iframe="https://reality.mentat.org/essays/reality/introduction"
#+begin_notes
- I've also started writing...
- road to reality
#+end_notes

#+REVEAL: split
#+begin_notes
next: ability to collaborate in real-time in a shared runtime.
social models etc.
#+end_notes

#+REVEAL_HTML: <img class="r-stretch" src="../images/papert.jpeg">

#+REVEAL: split
#+begin_notes
- I've also joined the MIT Probabilistic Computing Project where we'll be
  building out these ideas.
Help by writing, playing, using this code
- teaching people you know something and handing it off and then sharing it with me so I can be a hub for a
while as this thing lifts off.
#+end_notes

#+REVEAL_HTML: <img width="30%" src="../images/emmy.png">

We're hiring!

https://reality.mentat.org
